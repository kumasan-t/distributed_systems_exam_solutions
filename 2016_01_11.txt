===============================
Ex.1

Internal clock synchronization states that processes within a systems are
internally synchronized i.e. given pairs of clocks, the difference between
these two is always lesser than a given skew D (synchronization bound):

			|C_i(t) - C_j(t)| < D for i,j = 1,2, ... N

External clock synchronizaation states that processes of a systems are all
externally synchronized to a clock S such that the difference of their local
clocks and the external clock is always inside a synchronization bound D.

			|C_i(t) - S(t) | < D for i = 1, ... , N

Main difference is that internally synchronized clocks are said to agree within
the bound D while externally synchronized are said to agree within the bound D.
In order to reach the external clocks synchronization the Christian's algorithm
comes in help: the algorithm is very simple per se,
1. a process that want to synchronize to an external clock performs a request to
a server asking for the current time;
2. the server sends his answer and the process store the value. 
3. the process correct his answer by adjusting it based on the round trip time

At the end of the algorithm the process will set the following new clock:
C_i(t) = t + T_round / 2

Accuracy of this algorithm is

Case 1: time employed by the response is greater than the estimated time
delta = estimate response - real time = (RTT/2) - (RTT - min) = -(RTT/2) + min

Case 2:  time employed by the response is lesser than the estimated time
delta = estimate response - real time = (RTT/2) - min = +(RTT/2) - min

Consequently Christian's algorithm accuracy is +- (RTT/2) - min

===============================
Ex.2

Strong Accuracy: no process is detected by any process before it crashes.
Eventual Strong Accuracy: eventually no correct process is suspected by any
other process.

Implementation: Perfect Failure Detector
Uses: PerfectPointToPointLinks as pp2p

upon event <Init> do
	alive := TT
	detected := 0
	startTimer(TimeDelay)

upon event <Timeout> do
	for all p_i in TT do
		if (p_i !in alive) && (p_i !in detected) then
			detected := detected U {p_i}
			trigger <crash | p_i>
		trigger <pp2pSend | p_i, HEARTBEAT>
	alive := 0
	startTimer(TimeDelay)

upon event <pp2pDeliver | p_j, HEARTBEAT>
	alive := alive U {p_j}

Impplementation: Eventual Perfect Failure Detector
Uses: PerfectPointToPointLinks as pp2p

upon event <Init> do
	suspected := 0
	alive := TT
	period := delta
	startTimer(period)

upon event <Timeout> do
	if (alive intersect suspected != 0) then
		period := period + delta
	for all p_i in TT
		if (p_i !in suspected) && (p_i !in alive) then
			suspected := suspected U {p_i}
			trigger <suspect | p_i>
		if (p_i in alive) && (p_i in suspected) then
			suspected := suspected \ {p_i}
			trigger <restore | p_I>
		trigger <pp2pSend | p_i, HEARTBEAT>
	alive := 0
	startTimer(period)

upon event <pp2pDeliver | p_j, HEARTBEAT>
	alive := alive U {p_j}

In a eventually asynchronous environment we don't have guaranteed delivery
until the system will start to perform as a synchronous one. Thus, a hearbeat
sent by some process may or not reach another process p_j before the timeout
expiration. By knowing this, we can no longer provide Strong Accuracy, i.e. we
can't be sure that a process has permanently crashed because without any 
warranty on delivery time it is possible that we miss a HEARTBEAT within period
window. Thus a mechanism of restoration is needed in the case a wrong evaluation
is performed over a correct process.
However, as long as the system is performing as synchronous crashed processes are
correctly detected.

===============================
Ex.3

1.	R1(): 1
	R2(): 1 or 3 
	R3(): 1, 3, 2
	R4(): 3 or 2

2.	R1(): 1
	R2(): 1 or 3
	R3(): 1, 3, 2 iff (R2() == 1) OR 3, 2 iff (R2() == 3)
	R4(): 3 or 2

===============================
Ex.4

The CAP Theorem is an important result that states that in case of failures, a system must give up one
of these 3 properties: Availability, Consistency or Partition-Resilience. 
Consider a systems composed of two servers G1 and G2 and a client C.

   G1		Both servers keep track of a value V whose value is initially set to v_0.
  / |		G1 and G2 can communicate each other and with external client. A client
 /  |		can request to write and read from any server.
C   |		The proof:
 \  |		Assume for contradiction that there is a system that is available, consistent
  \ |		and partition tolerant. 
   G2		Let's partition the system then by removing the link between the servers G1 and
   			G2.

   G1		Suppose the client requests that v_1 be written on G1. Since our system is available
  /			G1 must respond. Since the network is partitioned, however G1 cannot replicate its
 /  		data to G2.
C   		Next we want our client to read to G2. Since system is available G2 must respond and
 \  		since the network is partitioned, G2 cannot update its value from G1. It returns v_0.
  \ 		G2 returns v_0 to our client after the client had already written v_1 to G1. This is 
   G2		inconsistent. We assumed a consisted, available, partition tolerant system existed but
we have just showed that there exists an execution for any such systems in which the system acts
inconsistely. Thus no such system exists.

===============================
Ex.5

Is the leader process necessary?

upon event <Init> do
	unordered := 0 
	delivered := 0
	round := 1
	wait := false

upon event <toBroadcast | m> do
	for all p_i in N_i
		trigger <pp2pSend | p_i, m, round>

upon event <pp2pDeliver | p_j, m, r> do
	if (m !in delivered)
		unordered := unordered U {m,r}
	for all p_i in N_i
		trigger <pp2pSend | p_i, m, r>

upon exist unordered != 0 && wait == false do
	wait := true
	trigger <propose | round, unordered>

upon event <decide | r, decided> do
	delivered := delivered U decided
	unordered := unordered \ decided
	decided := sort(decided)
	for all r,m in decided
		trigger <toDeliver | decided>
	round := round + 1
	wait := false


